package org.bitbucket.dominicverity.cellsim;

class CellularAutomaton extends BaseAutomaton {

    private static final int width$5 = 100;
    private static final int height$6 = 100;

    class Cell extends BaseCell {

        Cell _other$2;
        Cell _theother$3;
        Cell N$7;
        Cell S$8;
        Cell W$9;
        Cell E$10;
        boolean alive$11;

        Cell(Point _loc$1) {
            super(_loc$1);
            _other$2 = this;
            resetCellState();
        }

        void initNeighbours() {
            _theother$3 = getOther();
            N$7 = getCellRel(0, 1);
            S$8 = getCellRel(0, -1);
            W$9 = getCellRel(-1, 0);
            E$10 = getCellRel(1, 0);
        }

        synchronized void updater() {
            _other$2.alive$11 = alive$11;
        }

        synchronized int mapper() {
            return 0;
        }

        synchronized void resetCellState() {
            alive$11 = false;
        }

        Cell getCellRel(int... _off$4) {
            return (Cell)getCell(_off$4);
        }

        Cell getOther() {
            return (Cell)getNextGen();
        }

        void otherToSelf() {
            _other$2 = this;
        }

        void otherToOther() {
            _other$2 = _theother$3;
        }
    }

    CellularAutomaton() {
        super();
        initDims(100, 100);
        initCycles(false, false);
        initWorld();
        addInitialiser("corners", (() -> { corners$13(); }));
    }

    private void f$12() {
    }

    void corners$13() {
        {
            int i$14 = 0;
            int _end$16 = width$5 - 1;
            int _step$17 = 1;
            boolean _dirn$15 = _step$17 >= 0;
            if (_step$17 != 0)
                while (_dirn$15 && _end$16 >= i$14 || (!_dirn$15 && _end$16 <= i$14)) {
                    {
                        {
                            int j$18 = 0;
                            int _end$20 = height$6 - 1;
                            int _step$21 = 1;
                            boolean _dirn$19 = _step$21 >= 0;
                            if (_step$21 != 0)
                                while (_dirn$19 && _end$20 >= j$18 || (!_dirn$19 && _end$20 <= j$18)) {
                                    {
                                        {
                                            Cell _cell$22 = getCellAbs(i$14, j$18);
                                            {
                                                if (i$14 == 0 || i$14 == width$5 - 1) {
                                                    if (j$18 == 0) {
                                                        Cell nbr$23;
                                                        nbr$23 = _cell$22.N$7;
                                                        nbr$23._other$2.alive$11 = true;
                                                        nbr$23 = _cell$22.S$8;
                                                        nbr$23._other$2.alive$11 = true;
                                                        nbr$23 = _cell$22.W$9;
                                                        nbr$23._other$2.alive$11 = true;
                                                        nbr$23 = _cell$22.E$10;
                                                        nbr$23._other$2.alive$11 = true;
                                                        nbr$23 = _cell$22;
                                                        nbr$23._other$2.alive$11 = true;
                                                    }
                                                    if (j$18 == height$6 - 1) {
                                                        Cell nbr$24;
                                                        nbr$24 = _cell$22.N$7;
                                                        nbr$24._other$2.alive$11 = true;
                                                        nbr$24 = _cell$22.S$8;
                                                        nbr$24._other$2.alive$11 = true;
                                                        nbr$24 = _cell$22.W$9;
                                                        nbr$24._other$2.alive$11 = true;
                                                        nbr$24 = _cell$22.E$10;
                                                        nbr$24._other$2.alive$11 = true;
                                                        nbr$24 = _cell$22;
                                                        nbr$24._other$2.alive$11 = true;
                                                    }
                                                    else
                                                        _cell$22._other$2.alive$11 = false;
                                                }
                                                else
                                                    _cell$22._other$2.alive$11 = false;
                                            }
                                        }
                                    }
                                    j$18 = j$18 + _step$21;
                                }
                        }
                    }
                    i$14 = i$14 + _step$17;
                }
        }
    }

    private void empty_for$25() {
        {
            int i$26 = 0;
            int _end$28 = 6;
            int _step$29 = 1;
            boolean _dirn$27 = _step$29 >= 0;
            if (_step$29 != 0)
                while (_dirn$27 && _end$28 >= i$26 || (!_dirn$27 && _end$28 <= i$26)) {

                    i$26 = i$26 + _step$29;
                }
        }
    }

    private void empty_itr$30(int x$31, int y$32) {
        {
            Cell _cell$33 = getCellAbs(x$31, y$32);
            {
                Cell nbr$34;
                nbr$34 = _cell$33.N$7;

                nbr$34 = _cell$33.S$8;

                nbr$34 = _cell$33.W$9;

            }
        }
    }

    private void single_stmt_for$35() {
        int count$36 = 0;
        {
            int i$37 = 0;
            int _end$39 = 6;
            int _step$40 = 1;
            boolean _dirn$38 = _step$40 >= 0;
            if (_step$40 != 0)
                while (_dirn$38 && _end$39 >= i$37 || (!_dirn$38 && _end$39 <= i$37)) {
                    count$36 = count$36 + 1;
                    i$37 = i$37 + _step$40;
                }
        }
    }

    private void single_stmt_itr$41(int x$42, int y$43) {
        {
            Cell _cell$44 = getCellAbs(x$42, y$43);
            {
                Cell nbr$45;
                nbr$45 = _cell$44.N$7;
                nbr$45._other$2.alive$11 = false;
                nbr$45 = _cell$44.S$8;
                nbr$45._other$2.alive$11 = false;
                nbr$45 = _cell$44.W$9;
                nbr$45._other$2.alive$11 = false;
                nbr$45 = _cell$44.E$10;
                nbr$45._other$2.alive$11 = false;
                nbr$45 = _cell$44;
                nbr$45._other$2.alive$11 = false;
            }
        }
    }

    private void block_stmts_for$46(int exp$47, int bse$48) {
        int pow_res$49 = bse$48;
        int mult_res$50 = 0;
        double root_res$51 = bse$48;
        {
            int i$52 = 1;
            int _end$54 = exp$47;
            int _step$55 = 1;
            boolean _dirn$53 = _step$55 >= 0;
            if (_step$55 != 0)
                while (_dirn$53 && _end$54 >= i$52 || (!_dirn$53 && _end$54 <= i$52)) {
                    {
                        pow_res$49 = pow_res$49 * bse$48;
                        mult_res$50 = mult_res$50 + bse$48;
                        root_res$51 = root_res$51 / bse$48;
                    }
                    i$52 = i$52 + _step$55;
                }
        }
    }

    private void block_stmts_itr$56(int x$57, int y$58) {
        {
            Cell _cell$59 = getCellAbs(x$57, y$58);
            {
                Cell nbr$60;
                nbr$60 = _cell$59.N$7;
                {
                    if (nbr$60.alive$11 == true)
                        nbr$60._other$2.alive$11 = false;
                    else
                        nbr$60._other$2.alive$11 = true;
                }
                nbr$60 = _cell$59.S$8;
                {
                    if (nbr$60.alive$11 == true)
                        nbr$60._other$2.alive$11 = false;
                    else
                        nbr$60._other$2.alive$11 = true;
                }
                nbr$60 = _cell$59.E$10;
                {
                    if (nbr$60.alive$11 == true)
                        nbr$60._other$2.alive$11 = false;
                    else
                        nbr$60._other$2.alive$11 = true;
                }
                nbr$60 = _cell$59.W$9;
                {
                    if (nbr$60.alive$11 == true)
                        nbr$60._other$2.alive$11 = false;
                    else
                        nbr$60._other$2.alive$11 = true;
                }
            }
        }
    }

    private void expr_for$61(int end$62) {
        int stp$63 = -1;
        {
            int strt$64 = 5;
            int _end$66 = end$62;
            int _step$67 = stp$63;
            boolean _dirn$65 = _step$67 >= 0;
            if (_step$67 != 0)
                while (_dirn$65 && _end$66 >= strt$64 || (!_dirn$65 && _end$66 <= strt$64)) {

                    strt$64 = strt$64 + _step$67;
                }
        }
    }

    private void nest_for$68(int rows$69, int cols$70) {
        {
            int i$71 = 0;
            int _end$73 = rows$69;
            int _step$74 = 1;
            boolean _dirn$72 = _step$74 >= 0;
            if (_step$74 != 0)
                while (_dirn$72 && _end$73 >= i$71 || (!_dirn$72 && _end$73 <= i$71)) {
                    {
                        int j$75 = i$71;
                        int _end$77 = cols$70;
                        int _step$78 = 1;
                        boolean _dirn$76 = _step$78 >= 0;
                        if (_step$78 != 0)
                            while (_dirn$76 && _end$77 >= j$75 || (!_dirn$76 && _end$77 <= j$75)) {

                                j$75 = j$75 + _step$78;
                            }
                    }
                    i$71 = i$71 + _step$74;
                }
        }
    }

    private void nest_itr$79(int x$80, int y$81) {
        {
            Cell _cell$82 = getCellAbs(x$80, y$81);
            {
                Cell top_btm$83;
                top_btm$83 = _cell$82.N$7;
                {
                    {
                        Cell lft_rgt$84;
                        lft_rgt$84 = _cell$82.E$10;
                        lft_rgt$84._other$2.alive$11 = true;
                        lft_rgt$84 = _cell$82.W$9;
                        lft_rgt$84._other$2.alive$11 = true;
                    }
                }
                top_btm$83 = _cell$82.S$8;
                {
                    {
                        Cell lft_rgt$84;
                        lft_rgt$84 = _cell$82.E$10;
                        lft_rgt$84._other$2.alive$11 = true;
                        lft_rgt$84 = _cell$82.W$9;
                        lft_rgt$84._other$2.alive$11 = true;
                    }
                }
            }
        }
    }

    private void set_nbrs_itr$85(int x$86, int y$87) {
        {
            Cell _cell$88 = getCellAbs(x$86, y$87);
            {
                Cell n_all$89;
                n_all$89 = _cell$88.N$7;

                n_all$89 = _cell$88.S$8;

                n_all$89 = _cell$88.W$9;

                n_all$89 = _cell$88.E$10;

                n_all$89 = _cell$88;

            }
        }
        {
            Cell _cell$90 = getCellAbs(x$86, y$87);
            {
                Cell n_others$91;
                n_others$91 = _cell$90.N$7;

                n_others$91 = _cell$90.S$8;

                n_others$91 = _cell$90.W$9;

                n_others$91 = _cell$90.E$10;

            }
        }
        {
            Cell _cell$92 = getCellAbs(x$86, y$87);
            {
                Cell n_set$93;
                n_set$93 = _cell$92.N$7;

                n_set$93 = _cell$92.E$10;

            }
        }
    }

    BaseCell makeCell(Point _loc$1) {
        return new Cell(_loc$1);
    }

    Cell getCellAbs(int... _loc$1) {
        return (Cell)getCell(_loc$1);
    }
}
